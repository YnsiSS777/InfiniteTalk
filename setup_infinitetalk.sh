#!/bin/bash
# setup_infinitetalk.sh - Script d'installation corrig√© pour RunPod

echo "üöÄ Starting InfiniteTalk setup with all dependencies..."

# Installation des d√©pendances syst√®me CRITIQUES
apt-get update && apt-get install -y \
    ffmpeg \
    git \
    wget \
    curl \
    libsndfile1 \
    libsndfile1-dev \
    libgomp1 \
    build-essential \
    python3-dev \
    sox \
    libsox-dev \
    libsox-fmt-all

echo "‚úÖ System dependencies installed"

# Configuration Python et pip
cd /workspace/InfiniteTalk

# Mise √† jour pip
pip install --upgrade pip

# Installation PyTorch et CUDA
echo "üì¶ Installing PyTorch..."
pip install torch==2.4.1 torchvision==0.19.1 torchaudio==2.4.1 --index-url https://download.pytorch.org/whl/cu121

# Installation xformers
pip install -U xformers==0.0.28 --index-url https://download.pytorch.org/whl/cu121

# Installation des d√©pendances audio CRITIQUES
echo "üéµ Installing audio dependencies..."
pip install soundfile==0.12.1
pip install librosa==0.10.1
pip install scipy==1.11.4
pip install numpy==1.24.3
pip install audioread==3.0.0
pip install PySoundFile==0.9.0.post1

# Installation des autres d√©pendances InfiniteTalk
echo "üì¶ Installing InfiniteTalk dependencies..."
pip install misaki[en]
pip install ninja
pip install psutil
pip install packaging

# Installation Flash Attention (optionnel mais recommand√©)
echo "‚ö° Installing Flash Attention..."
pip install flash_attn==2.7.4.post1 || echo "Flash Attention installation failed, continuing with PyTorch attention"

# Installation des d√©pendances depuis requirements.txt
if [ -f "requirements.txt" ]; then
    pip install -r requirements.txt
fi

# Installation FastAPI pour l'API
echo "üåê Installing API dependencies..."
pip install fastapi==0.104.1
pip install uvicorn==0.24.0
pip install python-multipart==0.0.6
pip install aiofiles==23.2.1

# Installation Gradio si app.py est utilis√©
if [ -f "app.py" ]; then
    pip install gradio==4.19.2
fi

# V√©rifier l'installation de soundfile
echo "üîç Verifying soundfile installation..."
python -c "import soundfile; print('‚úÖ soundfile imported successfully')" || {
    echo "‚ùå soundfile import failed, trying alternative installation..."
    conda install -c conda-forge libsndfile -y
    pip install soundfile --force-reinstall
}

# T√©l√©chargement des mod√®les si n√©cessaire
if [ ! -d "/workspace/weights" ] && [ ! -d "/workspace/persistent/weights" ]; then
    echo "üì• Downloading models..."
    pip install huggingface-hub
    
    # Cr√©er le r√©pertoire weights
    mkdir -p /workspace/weights
    
    echo "Downloading Wan2.1-I2V-14B (this may take 15-30 minutes)..."
    huggingface-cli download Wan-AI/Wan2.1-I2V-14B-480P \
        --local-dir /workspace/weights/Wan2.1-I2V-14B-480P \
        --resume-download
    
    echo "Downloading chinese-wav2vec2-base..."
    huggingface-cli download TencentGameMate/chinese-wav2vec2-base \
        --local-dir /workspace/weights/chinese-wav2vec2-base \
        --resume-download
    
    # T√©l√©charger aussi le mod√®le safetensors
    huggingface-cli download TencentGameMate/chinese-wav2vec2-base model.safetensors \
        --revision refs/pr/1 \
        --local-dir /workspace/weights/chinese-wav2vec2-base
    
    echo "Downloading InfiniteTalk weights..."
    huggingface-cli download MeiGen-AI/InfiniteTalk \
        --local-dir /workspace/weights/InfiniteTalk \
        --resume-download
else
    echo "‚úÖ Models already present, skipping download"
fi

# Cr√©er les r√©pertoires n√©cessaires
mkdir -p /workspace/uploads
mkdir -p /workspace/outputs
mkdir -p /workspace/cache

# Test final des imports
echo "üß™ Running final import tests..."
python -c "
import torch
print(f'‚úÖ PyTorch version: {torch.__version__}')
print(f'‚úÖ CUDA available: {torch.cuda.is_available()}')

import soundfile
print('‚úÖ soundfile imported')

import librosa
print('‚úÖ librosa imported')

import fastapi
print('‚úÖ FastAPI imported')

try:
    import flash_attn
    print('‚úÖ Flash Attention available')
except:
    print('‚ö†Ô∏è Flash Attention not available, using PyTorch attention')

print('üéâ All critical dependencies imported successfully!')
" || {
    echo "‚ùå Some imports failed. Check the errors above."
    exit 1
}

echo "‚úÖ Setup completed successfully!"
echo "üìù You can now run: python api_server.py or python app.py"
